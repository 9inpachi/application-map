<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Maps.Code.LeafletUtils" locale="">
  <web>Maps.Code</web>
  <name>LeafletUtils</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>LeafletUtils</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content/>
  <object>
    <name>Maps.Code.LeafletUtils</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>cbe8cbbf-5255-4dfd-8eb7-1065c93786d7</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>//COMMON FUNCTIONS
//Some functions are interdependent so double check before editing a function
define('leaflet-commons', ['jquery'], function ($) {
  return {

    //Take options from the element and set for supplying to the map
    setCommonMapOptions: function (element)
    {
      //Get options from the element (can be extended easily)
      var options = {};
      options.mapId = element.id;
      var zoom = element.dataset.zoom;
      options.zoom = zoom !== undefined ? zoom : 14;
      options.tiles = element.dataset.tiles !== undefined ? element.dataset.tiles : 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
      return options;
    },

    //Create an empty map and return it
    createEmptyMap: function (options)
    {
      //Create the map
      var mapId = 'map-' + options.id,
          zoom = options.defaultZoom !== null ? (options.defaultZoom !== undefined ? options.defaultZoom : 12) : 12,
          tiles = options.tiles !== '' ? (options.tiles !== undefined ? options.tiles : 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png') : 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
          attribution = options.attribution !== undefined ? options.attribution : '',
          map = new L.Map(mapId, {zoom: zoom, center: [48, 2]});
      options.defaultLocation = options.defaultLocation !== '' ? options.defaultLocation : '48,2';
      map.zoomControl.setPosition('bottomright');
      //Adding the navigation control
      if (options.includeCurrentLocation == 1) {
        this.addNavigation(map);
      }
      //Adding the map scale control
      if (options.includeMapScale == 1) {
        L.control.scale({position: 'bottomleft'}).addTo(map);
      }
      //Adding the fullscreen control
      if (options.addFullscreen == 1) {
        this.addFullscreen(map);
      }
      //Adding the search control
      this.addSearch(map);
      //Add a tiles layer to the map (the background)
      L.tileLayer(tiles, {
        attribution: attribution,
        maxZoom: 17,
        id: 'mapbox.streets'
      }).addTo(map);
      return map;
    },

    //Add a new marker
    addMarker: function (iconUrl, location, callback)
    {
      var marker;
      if (iconUrl) {
        //Get image size for fixing marker offset
        var markerImg = new Image();
        markerImg.src = iconUrl;
        markerImg.on('load', function () {
          var height = 41;
          var aspectRatio = this.width/this.height;
          var width = aspectRatio * height;
          var icon = L.icon({
            iconUrl: iconUrl,
            iconSize: [width, height],
            iconAnchor: [width/2, (height-1)],
            popupAnchor: [0, -(height-5)]
          });
          marker = L.marker(location, {icon: icon});
          callback(marker);
        });
      } else {
        marker = L.marker(location);
        callback(marker);
      }
    },

    //Function for adding navigation control. Works only if the connection is secure (https etc.)
    addNavigation: function (map)
    {
      var locMarker;
      this.addCustomControl(map, 'fa-location-arrow', 'Current location', 'bottomright', function (e) {
        var locate = map.locate({ setView: true, maxZoom: 16, watch: false });
        map.on('locationerror', function (e) {
          new XWiki.widgets.Notification('Cannot get location in an insecure context (HTTP). Secure context (HTTPS) required.', 'error');
        });
        map.on('locationfound', function (e) {
          if (locMarker) {
            locMarker.remove();
          }
          locMarker = L.circleMarker(e.latlng, {
            color: '#146ea7',
            fillColor: '#146ea7',
            fillOpacity: 0.4,
            radius: 10
          }).bindPopup('Current location').addTo(map);
        });
      });
    },

    //Adding search control
    addSearch: function (map)
    {
      var rootScope = this;
      this.addCustomControl(map, 'fa-search', 'Search', 'topleft', function (e) {
        $('.map-popup').removeClass('open');
        $('.map-search-filter').toggleClass('open');
        rootScope.updateURLWithMapState();
      });
    },

    //Adding fullscreen control
    addFullscreen: function (map)
    {
      var rootScope = this;
      this.addCustomControl(map, 'fa-expand leaflet-control-fullscreen', 'Fullscreen', 'topright', function (e) {
        var mapContainer = $(e.target).parents('.map-wrapper');
        mapContainer.toggleClass('fullscreen');
        if (mapContainer.hasClass('fullscreen')) {
          $('body').css('overflow', 'hidden');
        } else {
          $('body').css('overflow', 'auto');
        }
        map.invalidateSize(true);
        rootScope.updateURLWithMapState();
      });
    },

    //Universal function for adding controls
    addCustomControl: function (map, faIcon, title, position, clickEvent)
    {
      var rootScope = this;
      L.Control.customControl = L.Control.extend({
        onAdd: function (map) {
          var container = L.DomUtil.create('div', 'leaflet-control-custom');
          container.setAttribute('title', title);
          container.setAttribute('aria-label', title);
          //Add a tooltip to the control according to its position
          if (position == 'topleft' || position == 'bottomleft') {
            container.setAttribute('data-placement', 'right');
          } else if(position == 'topright' || position == 'bottomright') {
            container.setAttribute('data-placement', 'left');
          }
          $(container).tooltip();
          var icon = L.DomUtil.create('div', 'fa ' + faIcon);
          container.appendChild(icon);
          L.DomEvent.on(container, 'click', L.DomEvent.stopPropagation)
            .on(container, 'click', L.DomEvent.stop)
            .on(container, 'click', this._toggleControl, this);
          return container;
        },
        _toggleControl: function (e) {
          e.preventDefault();
          clickEvent(e);
        }
      });
      (new L.Control.customControl({ position: position })).addTo(map);
    },

    //Return latlng if location is address or a string of latlng
    getLocationCoords: function (location, callback)
    {
      //Check if the location type is an address or coordinates
      var locType = 'address';
      if (location) {
        //If location is already an array
        if (Array.isArray(location) &amp;&amp; location.length === 2) {
          locType = 'latLngArr';
          callback(location);
          return;
        } else {
          var checkLoc = location.split(',');
          //Location type is coordinates if there are two values and each is a number
          if (checkLoc.length == 2 &amp;&amp; !isNaN(checkLoc[0].trim()) &amp;&amp; !isNaN(checkLoc[1].trim())) {
            locType = 'latLng';
          }
        }
      }
      if (locType == 'latLng') {
        //Make an array for of the two coordinates
        var latLng = location.split(',').map(function (val) {
          return val.trim();
        });
        //Set the location to the array
        location = latLng;
        callback(location);
      } else {
        //If the location type is address, get the location coordinates from openstreetmap api
        var queryURL = 'https://nominatim.openstreetmap.org/search';
        var q = location;
        //Make the request
        $.getJSON(queryURL, { 'q': q, 'format': 'json' }).then(function (locFromAddress) {
          if (locFromAddress != undefined &amp;&amp; locFromAddress.length &gt; 0) {
            var latLng = [locFromAddress[0].lat, locFromAddress[0].lon];
            //Set the location to the coordinates gotten from openstreetmap api
            location = latLng;
            callback(location);
          } else {
            //Display an error if the address does not map to a location
            new XWiki.widgets.Notification('Error while geocoding the address "' + q + '" with OpenStreetMap Nominatim', 'error');
          }
        });
      }
    },

    reverseGeocode: function (location, callback)
    {
      var queryURL = 'https://nominatim.openstreetmap.org/reverse';
      //Make the request
      $.getJSON(queryURL, { 'lat': location.lat, 'lon': location.lng, 'format': 'json' }).then(function (locationInfo) {
        if (locationInfo != undefined) {
          //Set the place name gotten from openstreetmap api
          var placeName = locationInfo.display_name;
          callback(placeName);
        } else {
          callback('Place');
          //Display an error if the address does not map to a location
          new XWiki.widgets.Notification('Error while reverse geocoding the location "' + location + '" with OpenStreetMap Nominatim', 'error');
        }
      });
    },

    //Decodes the polylines (courtesy of @mapbox/polyline)
    decodePolyline: function (str, precision)
    {
      var index = 0, lat = 0, lng = 0, coordinates = [], shift = 0, result = 0, pByte = null, latitude_change, longitude_change, factor = Math.pow(10, Number.isInteger(precision) ? precision : 5);
      while (index &lt; str.length) {
        // Reset shift, result, and byte
        pByte = null;
        shift = 0;
        result = 0;
        do {
          pByte = str.charCodeAt(index++) - 63;
          result |= (pByte &amp; 0x1f) &lt;&lt; shift;
          shift += 5;
        } while (pByte &gt;= 0x20);
        latitude_change = ((result &amp; 1) ? ~(result &gt;&gt; 1) : (result &gt;&gt; 1));
        shift = result = 0;
        do {
          pByte = str.charCodeAt(index++) - 63;
          result |= (pByte &amp; 0x1f) &lt;&lt; shift;
          shift += 5;
        } while (pByte &gt;= 0x20);
        longitude_change = ((result &amp; 1) ? ~(result &gt;&gt; 1) : (result &gt;&gt; 1));
        lat += latitude_change;
        lng += longitude_change;
        coordinates.push([lat / factor, lng / factor]);
      }
      return coordinates;
    },

    //Gets a featureGroup of polylines that connect two paths from Open Source Routing Machine (project-osrm.org)
    generatePath: function (data, callback)
    {
      var rootScope = this;
      //Get the path as polyline from osm open source routing machine (osrm)
      //OSRM takes coords as [longitude,latitude] not [latitude,longitude]
      var pointsForOSRM = data.points.map((point) =&gt; {
        return point.reverse().join();
      }).join(';');
      var queryURL = 'http://router.project-osrm.org/route/v1/car/' + pointsForOSRM;
      $.getJSON(queryURL, { 'alternatives': 'true', 'steps': 'true', 'geometries': 'polyline6', 'overview': 'simplified' }).done(function (osrmObject) {
        if (osrmObject.code == 'Ok') {
          //Layers/features hierarchy: routesFeatureGroup -&gt; polylineFeatureGroup -&gt; polyline ('-&gt;' means 'contains')
          var routesFeatureGroup = L.featureGroup();
          var routeColors = ['#2662c1', '#518be8', '#79a9f7', '#8eb9ff', '#b2cfff', '#b2cfff'];
          var routes = osrmObject.routes;
          //Going reverse so that the recommended route (at Array(0)) is highest in layers
          for (var i = routes.length - 1; i &gt;= 0; i--) {
            var latlngs = [];
            var polylineFeatureGroup = L.featureGroup();
            routes[i].legs.forEach (function (leg) {
              var steps = leg.steps;
              var polyline;
              for (var j = 0; j &lt; steps.length; j++) {
                //Polyline is decoded from the osrm response using mapbox/polyline decode method
                polyline = L.polyline(rootScope.decodePolyline(steps[j].geometry, 6), { color: routeColors[i], weight: 7, stroke: 'white', lineCap: 'round' });
                polylineFeatureGroup.addLayer(polyline);
              }
            });
            //Processing data for popup
            if (data.includePopup) {
              //Calculating the distance of the route
              var routeDistance = parseInt(parseFloat(routes[i].distance) / 1000) + ' km';
              //Calculating the duration of the route
              var routeDuration = (parseFloat(routes[i].duration) / 60).toFixed(2);
              if (routeDuration &lt; 60) {
                routeDuration = Math.ceil(routeDuration) + ' mins';
              } else {
                var durationInHours = (routeDuration / 60).toFixed(2);
                var hours = Math.floor(durationInHours);
                var mins = Math.ceil((durationInHours - hours) * 60);
                routeDuration = hours + ' hrs ' + mins + ' mins';
              }
              polylineFeatureGroup.bindPopup('&lt;b&gt;Route ' + (i + 1) + '&lt;/b&gt;&lt;br/&gt;Distance: ' + routeDistance + '&lt;br/&gt;Duration: ' + routeDuration);
            }
            routesFeatureGroup.addLayer(polylineFeatureGroup);
          }
          callback(routesFeatureGroup);
        } else if (osrmObject.code == 'NoRoute') {
          new XWiki.widgets.Notification('Error getting path. No route found.', 'error');
        } else {
          new XWiki.widgets.Notification('Error getting path. Make sure the distance is not greater than 10000km.', 'error');
        }
      })
      .fail(function(e){
        new XWiki.widgets.Notification('Error getting path. OSRM: ' + e.responseJSON.message, 'error');
      });
    },

    removeParameter: function (url, parameter) {
      var urlparts = url.split('?');
      if (urlparts.length &gt;= 2) {
        var prefix = encodeURIComponent(parameter) + '=';
        var pars = urlparts[1].split(/[&amp;;]/g);
        for (var i = pars.length; i-- &gt; 0;) {
          if (pars[i].lastIndexOf(prefix, 0) !== -1) {
            pars.splice(i, 1);
          }
        }
        return urlparts[0] + (pars.length &gt; 0 ? '?' + pars.join('&amp;') : '');
      }
      return url;
    },

    //Replace a parameter in the url and return the new url
    replaceParameter: function (url, param, value)
    {
        var re = new RegExp("[\\?&amp;]" + param + "=([^&amp;#]*)"),
            match = re.exec(url),
            delimiter,
            newString;
        if (match === null) {
            var hasQuestionMark = /\?/.test(url);
            delimiter = hasQuestionMark ? "&amp;" : "?";
            newString = url + delimiter + param + "=" + value;
        } else {
            delimiter = match[0].charAt(0);
            newString = url.replace(re, delimiter + param + "=" + value);
        }
        return newString;
    },

    //Check state of the element if it has a given class
    checkState: function (element, className)
    {
      if (element.hasClass(className)) {
        return true;
      } else {
        return false;
      }
    },

    //Update url of facets with the given map elements state
    updateFacetsURLWithMapState: function (states)
    {
      var rootScope = this;
      var $facets = $([
        '.search-results-sort a.sort-item',
        '.search-options a.options-item',
        '.pagination a',
        '.controlPagination a',
        'a.search-facets-action-reset',
        '.search-facet a.itemName',
        '.search-facet-body a.more',
        '.search-facet-body .selectedLocation a'
      ].join(','));
      for (var state in states) {
        $facets.each(function (el) {
          $(this).attr('href', rootScope.removeParameter($(this).attr('href'), state));
          if (states[state]) {
            $(this).attr('href', rootScope.replaceParameter($(this).attr('href'), state, states[state]));
          }
        });
      }
    },

    //Update url for the given map elements state
    updateURLWithMapState: function ()
    {
      var viewURL = window.location.href;
      //Get all elements with enabled state
      var states = {};
      states.mfullscreen = this.checkState($('.map-wrapper'), 'fullscreen');
      states.msearchw = this.checkState($('.map-search-filter'), 'open');
      states.mfacetsection = this.checkState($('#show-search-facets'), 'open');
      states.msearchitemsection = this.checkState($('#show-search-items'), 'open');
      for (var state in states) {
        viewURL = this.removeParameter(viewURL, state);
        if (states[state]) {
          viewURL = this.replaceParameter(viewURL, state, states[state]);
        }
      }
      this.updateFacetsURLWithMapState(states);
      window.history.pushState(null, document.title, viewURL);
      return viewURL;
    },

    //Select a place on the map
    addSinglePointSelection: function (map, defaultLocation, callback)
    {
      var marker = L.marker(defaultLocation).addTo(map);
      map.on('click', function (e) {
        if ($(".leaflet-popup-pane").html() == '') {
          if ($('.map-search-filter') &amp;&amp; !$('.map-search-filter').hasClass('open')) {
            marker.remove();
            marker = null;
            marker = L.marker(e.latlng).addTo(map);
            callback(marker);
          }
        }
      });
    }

  }
});</code>
    </property>
    <property>
      <name>leaflet-commons</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>Maps.Code.LeafletUtils</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>be85f2cd-352e-43c2-a8f9-c7479e91a4ae</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>requirejs.config({
  paths: {
    'leaflet': ['$services.webjars.url("leaflet", "leaflet.js")']
  }
});
require(['jquery', 'leaflet', 'leaflet-commons', 'bootstrap'], function ($, leaflet, leafletCommons) {
  'use strict';
  function init()
  {

    var map;

    function processPoint (data, marker, allLayers)
    {
      var popupData = '';
      //If there is excessive popup data, allow it to be scrolled
      if (data.popupContent.length &gt; 500) {
        popupData = '&lt;h2&gt;' + data.title + '&lt;/h2&gt;&lt;hr/&gt;' + '&lt;div style="height: 150px; overflow: auto;"&gt;' + data.popupContent + '&lt;/div&gt;';
      } else {
        popupData = '&lt;h2&gt;' + data.title + '&lt;/h2&gt;&lt;hr/&gt;' + '&lt;div&gt;' + data.popupContent + '&lt;/div&gt;';
      }
      marker.bindPopup(popupData);
      allLayers.addLayer(marker);
    }

    //Render the map
    $$('.map-container').each(function (element) {
      var options = JSON.parse(element.dataset.options);
      options.addFullscreen = 1;
      map = leafletCommons.createEmptyMap(options);
      var mapData = JSON.parse(element.dataset.mapdata);
      if (mapData.length === 0) {
        leafletCommons.getLocationCoords(options.defaultLocation, function (location) {
          map.setView(location);
        });
      }
      var allLayers = L.featureGroup();
      var dataLength = mapData.length - 1;
      var i = 0;
      map.on('click', function () {
        if ($(".leaflet-popup-pane").html() == '') {
          $('.map-search-filter').removeClass('open');
          leafletCommons.updateURLWithMapState();
        }
      });
      mapData.each(function (data) {
        if (data.location != null &amp;&amp; data.type == 'point') {
          leafletCommons.getLocationCoords(data.location, function (location) {
            leafletCommons.addMarker(data.markerIcon, location, function (marker) {
              processPoint(data, marker, allLayers);
            });
            if (dataLength == i) {
              allLayers.addTo(map);
              map.fitBounds(allLayers.getBounds());
            }
            i++;
          });
        } else if (data.type == 'path') {
          var points = JSON.parse(data.points);
          var noOfPoints = points.length - 1;
          var j = 0;
          var allPoints = [];
          points.forEach(function (point) {
            allPoints.push(point.location);
            leafletCommons.getLocationCoords(point.location, function (pointLocation) {
              leafletCommons.addMarker(point.markerIcon, pointLocation, function (pointMarker) {
                //Putting point data in a single object
                point.location = pointLocation;
                point.marker = pointMarker;
                processPoint(point, point.marker, allLayers);
                if (noOfPoints == j) {
                  var pathData = {
                    points: allPoints,
                    includePopup: data.includePopup
                  };
                  leafletCommons.generatePath(pathData, function (path) {
                    path.addTo(map);
                  });
                  if (dataLength == i) {
                    allLayers.addTo(map);
                    map.fitBounds(allLayers.getBounds());
                  }
                  i++;
                }
                j++;
              });
            });
          });
        } else {
          new XWiki.widgets.Notification('Error while adding items to the map. Make sure the query is correct.', 'error');
        }
      });
    });

    //Handle map item and location search
    $('.map-search-form').submit(function (e) {
      e.preventDefault();
      var formVal = $(this).find('input[type=search]').val();
      var searchType = $(this).find('input[name=search-type]:checked').val();
      var viewURL = leafletCommons.updateURLWithMapState();
      if (searchType == 'location') {
        leafletCommons.getLocationCoords(formVal, function(location){
          if (location &amp;&amp; map) {
            map.setView(L.latLng(location), 14);
          }
        });
      } else {
        searchType = searchType !== undefined ? searchType : 'item';
        viewURL = leafletCommons.replaceParameter(viewURL, 'text', formVal);
        viewURL = leafletCommons.replaceParameter(viewURL, 'search_type', searchType);
        $(document).trigger('xwiki:search:update', viewURL);
      }
    });

    //Toggle refine your search and result items sections
    $('.map-results-section').on('click', function () {
      $(this).toggleClass('open');
      $(this).next().toggleClass('open');
      leafletCommons.updateURLWithMapState();
    });

    //Open/close dropdown for selecting search type location/item
    $('#search-type-btn').on('click', function () {
      $('.search-types').toggleClass('open');
    });

    //Go to location of the result item
    $('.search-item-results .goto-loc-point').on('click', function () {
      var loc = JSON.parse(this.dataset.location);
      if (loc) {
        leafletCommons.getLocationCoords(loc, function(location){
          if (location &amp;&amp; map) {
            map.setView(L.latLng(location), 14);
          }
        });
      }
    });

    //Go to location of the path result item
    $('.search-item-results .goto-loc-path').on('click', function () {
      var loc = JSON.parse(this.dataset.location);
      if (loc) {
        var allPoints = loc.points;
        var noOfPoints = allPoints.length - 1;
        var processedPoints = [];
        var i = 0;
        allPoints.each(function (point) {
          leafletCommons.getLocationCoords(point, function(pointLoc){
            processedPoints.push(pointLoc);
            if (noOfPoints === i) {
              map.fitBounds(processedPoints);
            }
            i++;
          });
        });
      }
    });

    $(document).on('keyup', function (e) {
      if (e.keyCode == 27) {
        if ($('.map-wrapper').hasClass('fullscreen')) {
          $('.leaflet-control-fullscreen').click();
        }
      }
    });

    $('#map-search-close').on('click', function () {
      $('.map-search-filter').removeClass('open');
      leafletCommons.updateURLWithMapState();
    });

  }

  //Run the init() function when dom is loaded or updated
  (XWiki &amp;&amp; XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", init);
  (XWiki &amp;&amp; XWiki.domIsUpdated &amp;&amp; init()) || document.observe("xwiki:dom:updated", init);

});</code>
    </property>
    <property>
      <name>leaflet-main</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>Maps.Code.LeafletUtils</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>22dabf89-449d-47e6-b9de-657d732279b7</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>@import "$services.webjars.url('leaflet', 'leaflet.css')";

@box-shadow: darken(@xwiki-page-content-bg, 30%);
/*
 * Leaflet common
*/
.map-wrapper{
  position: relative;
}
.map-container, .map-preview{
  width: 100%;
  max-width: 100%;
  height: 400px;
  border: 4px solid @xwiki-page-content-bg;
  border-radius: 5px;
  box-shadow: 0px 0px 3px @box-shadow;
  z-index: 990;
}
.leaflet-top{
  top: 10px;
}
.leaflet-left{
  left: 10px;
}
.leaflet-right{
  right: 10px;
}
.leaflet-bottom{
  bottom: 10px;
}
.leaflet-popup-content-wrapper, .leaflet-popup-tip {
    background: @xwiki-page-content-bg;
    color: @text-color;
    box-shadow: 0 3px 14px @box-shadow;
}
.leaflet-right .leaflet-control, .leaflet-left .leaflet-control{
  margin: 0;
}
.leaflet-top .leaflet-control{
  margin: 0;
  margin-bottom: 10px;
}
.leaflet-bottom .leaflet-control{
  margin: 0;
  margin-top: 10px;
}
/*
 * Leaflet controls
*/
.leaflet-container .leaflet-control-search, .leaflet-container .leaflet-control-search:hover, .leaflet-container .leaflet-control-search:active{
  background: none;
  border: none;
}
.leaflet-container .leaflet-control-custom, .leaflet-container .leaflet-control-search .search-button, .leaflet-bar a, .leaflet-bar a:hover, .leaflet-touch .leaflet-bar a{
  background: @xwiki-page-content-bg;
  width: 35px;
  height: 35px;
  text-align: center;
  cursor: pointer;
  border-radius: 5px;
  overflow: hidden;
  color: @text-color;
  box-shadow: 0px 1px 4px 0px @box-shadow;
  border: none;
  transition: background-color 0.3s;
}
.leaflet-container .leaflet-control-search .search-button{
  font-family: FontAwesome;
  position: relative;
}
.leaflet-control-custom&gt;.fa, .leaflet-container .leaflet-control-search .search-button:before{
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  color: @text-color;
  font-size: 20px;
}
.leaflet-container .leaflet-control-search .search-button:before{
  content: '\f002';
  font-size: 17px;
  margin-top: -2px;
}
.leaflet-container .leaflet-control-custom:hover, .leaflet-container .leaflet-control-search .search-button:hover, .leaflet-bar a:hover{
  background: darken(@xwiki-page-content-bg, 8%);
  transition: background 0.3s;
  text-decoration: none;
}
.leaflet-container .leaflet-control-search input.search-input{
  box-shadow: 0px 1px 4px 0px @box-shadow;
  background: @xwiki-page-content-bg;
  border: none;
  border-radius: 8px;
  color: @text-color;
  height: 35px;
  width: 200px;
  padding: 5px 15px;
  margin: 0;
}
.leaflet-control-search .search-cancel{
  margin: 7px 0;
  right: 42px;
}
.leaflet-control-search.search-load input.search-input{
  background: @xwiki-page-content-bg;
}
.leaflet-control-search .search-tooltip{
  border: none;
  border-radius: 8px;
  background: @xwiki-page-content-bg;
  color: @text-color;
  padding: 5px;
  left: 0;
  right: 0;
  float: right;
  overflow-x: hidden;
}
.leaflet-control-search .search-tooltip .search-tip{
  border: none;
  border-radius: 0;
  background: @xwiki-page-content-bg;
  color: @text-color;
}
.leaflet-control-container&gt;div{
  z-index: 991;
}
.leaflet-touch .leaflet-control-layers, .leaflet-touch .leaflet-bar{
  border: none;
}
.leaflet-touch .leaflet-bar a:first-child{
  border-radius: 5px;
  border-bottom-left-radius: 0;
  border-bottom-right-radius: 0;
}
.leaflet-touch .leaflet-bar a:last-child{
  border-radius: 5px;
  border-top-left-radius: 0;
  border-top-right-radius: 0;
}
.leaflet-touch .leaflet-bar a{
  line-height: 32px;
}
.leaflet-control-search .search-alert{
  background: @xwiki-page-content-bg;
  width: 100%;
  height: 30px;
  padding: 9px 12px;
  border-radius: 8px;
  box-shadow: 0px 1px 4px 0px @box-shadow;
}
/*
 * Map search
*/
.map-search{
  position: relative;
  margin-bottom: 7px;
  width: 100%;
}
.map-search-input-wrapper{
  position: relative;
}
.map-search .map-search-input{
  padding-right: 25px;
  width: 100%;
  background: @xwiki-page-content-bg;
  color: @text-color;
  border: 1px solid fade(@text-color, 30%);
  display: inline;
}
.map-search .map-search-btn{
  background: none;
  border: none;
  color: @brand-primary;
  font-size: 18px;
  margin: 0;
  padding: 0;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  right: 10px;
}
.map-search-btn:hover, .map-search-btn:active, .map-search-btn:active:focus, .map-search-btn:hover:active, .map-search-btn:visited, .map-search-btn:focus{
  background: none;
  border: none;
  color: @brand-primary;
  text-shadow: 0px 0px 5px fade(@brand-primary, 50%);
  box-shadow: none;
  outline: none;
}
/*
 * If location search is included
*/
#search-type-btn{
  position: absolute;
  right: 5px;
  top: 50%;
  color: @brand-primary;
  font-size: 16px;
  cursor: pointer;
  padding: 5px;
  transform: translateY(-50%);
}
#search-type-btn:hover{
  text-shadow: 0px 0px 5px fade(@brand-primary, 50%);
}
.search-types{
  max-height: 0;
  overflow: hidden;
  padding: 0 10px;
  border-bottom-right-radius: 5px;
  border-bottom-left-radius: 5px;
  box-shadow: 0px 0px 3px @box-shadow;
  background: @xwiki-page-content-bg;
  transition: all 0.5s;
}
.search-types.open{
  max-height: 200px;
  padding: 5px 10px;
  transition: all 0.5s;
}
.search-types .search-type{
  display: block;
  padding: 5px 0px;
}
.search-types .search-type&gt;*{
  display: inline-block;
}
.map-search #search-type-btn + .map-search-input{
  padding-right: 45px;
}
.map-search #search-type-btn + .map-search-input + .map-search-btn{
  right: 25px;
}
/*
 * Map search results
*/
.search-item-results, .map-filters{
  max-height: 0;
  overflow: hidden;
  padding: 0px;
  transition: all 0.5s;
}
.search-item-results{
  padding: 0px 7px;
}
.search-item-results.open, .map-filters.open{
  max-height: 300px;
  overflow-y: auto;
  transition: all 0.5s;
}
.search-item-results .search-result-item{
  padding: 5px 0;
  border-bottom: 1px solid @box-shadow;
  position: relative;
  padding-right: 25px;
}
.search-item-results .search-result-item:last-child{
  border-bottom: none;
}
.search-item-results .search-result-item h4{
  margin: 5px 0;
  font-size: 14px;
}
.search-item-results .search-result-item .goto-loc{
  width: 23px;
  height: 23px;
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  right: 0px;
  font-size: 14px;
  cursor: pointer;
  border-radius: 50%;
  background: transparent;
  border: 1px solid @text-color;
  color: @text-color;
  transition: all 0.5s;
}
.search-item-results .search-result-item .goto-loc:hover{
  box-shadow: 0px 0px 5px fade(@text-color, 50%);
}
.search-item-results .search-result-item .fa.fa-map-marker{
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  transition: all 0.5s;
}
.search-item-results .search-result-item .goto-loc:hover .fa.fa-map-marker{
  animation: markerJump linear 0.5s;
}
@keyframes markerJump{
  40% {
    transform: translate(-50%, -90%);
  }
  70% {
    transform: translate(-50%, -35%);
  }
  85% {
    transform: translate(-50%, -70%);
  }
  100% {
    transform: translate(-50%, -50%);
  }
}
/*
 * Map search/filter overlay (new)
*/
.map-search-filter{
  position: absolute;
  left: 10px;
  top: 10px;
  width: 33%;
  min-width: 33%;
  height: auto;
  max-height: 95%;
  overflow-y: auto;
  background: @xwiki-page-content-bg;
  border-radius: 7px;
  box-shadow: 0px 0px 5px @box-shadow;
  padding: 8px;
  transform: translateX(-100%) scale(0.7);
  opacity: 0;
  visibility: hidden;
  transition: all 0.2s;
  z-index: 992;
}
.map-search-filter.open{
  transform: translateX(0) scale(1);
  opacity: 1;
  visibility: visible;
  transition: all 0.4s;
}
.map-results-section{
  font-size: 14px;
  cursor: pointer;
  margin: 5px;
}
.map-results-section .fa{
  float: right;
  margin-top: 2px;
  transition: all 0.3s;
}
.map-results-section.open .fa{
  transform: rotateZ(-90deg);
  margin-top: 3px;
  transition: all 0.3s;
}
.map-search-filter .search-facets {
  background-color: transparent;
  box-shadow: none;
  margin-bottom: 5px;
  border-radius: 0;
}
.map-search-filter .search-facet {
  padding: 5px;
}
#map-search-close{
  position: absolute;
  top: 18px;
  left: 33.5%;
  width: 30px;
  height: 35px;
  font-size: 12px;
  border-top-right-radius: 50%;
  border-bottom-right-radius: 50%;
  background: @xwiki-page-content-bg;
  color: @text-color;
  box-shadow: 0px 0px 5px @box-shadow;
  cursor: pointer;
  z-index: 992;
  opacity: 0;
  transform: translateX(-100%);
  visibility: hidden;
  transition: box-shadow 0.4s;
}
#map-search-close &gt; i{
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
}
.map-search-filter.open + #map-search-close{
  opacity: 1;
  transform: translateX(0);
  visibility: visible;
  transition: all 0.2s;
  transition-delay: 0.4s;
}
.map-preview ~ .map-search-filter{
  width: 50%;
  max-width: 50%;
}
.map-preview ~ #map-search-close{
  left: 51%;
}
@media (max-width: 768px){
  .map-search-filter{
    width: 275px;
  }
  #map-search-close{
    left: 280px;
  }
}
/*
 * Fullscreen map
*/
.map-wrapper.fullscreen{
  position: fixed;
  width: 100%;
  height: 100vh;
  left: 0;
  top: 0;
  z-index: 1000000;
}
.map-wrapper.fullscreen .map-container{
  height: 100% !important;
  width: 100% !important;
  border: 0px !important;
  border-radius: 0 !important;
  box-shadow: none !important;
}
/*
 * Small popup
*/
.leaflet-popup-content-wrapper{
  border-radius: 7px;
}
.leaflet-popup-content{
  margin: 13px 15px;
}
.leaflet-popup-content &gt; h2{
  margin: 7px 0;
}
.leaflet-popup-content &gt; hr{
  margin: 7px 0;
}
/*
 * Override css
*/
@media (max-width: 768px){
  .map-filters .search-facets.collapsed-xs .search-facets-header .xHint, .map-filters .search-facets.collapsed-xs .search-facets-actions, .map-filters .search-facets.collapsed-xs .search-facet {
    display: block;
  }
}


</code>
    </property>
    <property>
      <contentType>LESS</contentType>
    </property>
    <property>
      <name>leaflet-css</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
