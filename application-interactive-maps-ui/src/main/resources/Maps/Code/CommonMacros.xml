<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Maps.Code.CommonMacros" locale="">
  <web>Maps.Code</web>
  <name>CommonMacros</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>xwiki:Maps.Code.LeafletUtils</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>CommonMacros</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
#set ($solrConfig = {
  'filterQuery': [
    'type:DOCUMENT', 'class:Maps.Code.PathClass OR class:Maps.Code.ShapeClass OR class:Maps.Code.IndoorClass'
  ],
  'facetFields': []
})
{{/velocity}}

{{include reference="Main.SolrSearchConfig"/}}

{{include reference="Main.SolrSearchMacros"/}}

{{velocity output="false"}}
## Get HTML from XWiki/2.1 syntax
#macro (getHtml $xwiki)
  #set ($xdom = $services.rendering.parse($xwiki, "xwiki/2.1"))
  $services.rendering.render($xdom, "xhtml/1.0")
#end

## Check marker icon
#macro (checkMarkerIcon $pageName $variable)
  ## Get attachment URL for marker icon if attachment name starts with 'marker'
  #set ($targetDoc = $xwiki.getDocument(${pageName}))
  #foreach ($attachment in $targetDoc.getAttachmentList())
    #set ($attachmentName = $attachment.getFilename())
    #if ($attachmentName.toLowerCase().startsWith('marker'))
      #set ($attachmentURL = $targetDoc.getAttachmentURL($attachmentName))
      #set ($discard = $variable.put('markerIcon', $attachmentURL))
    #end
  #end
#end

## Process location property data
#macro (processLocationProperty $property)
  ## Check if the page contains the object property
  #if ("$!response.get(${property})" != '')
    #set ($responseData = {})
    #set ($discard = $responseData.put('type', 'point'))
    ## Get document title and content
    #set ($title = $response.get('title_'))
    #set ($popupContent = $response.get('doccontentraw_'))
    ## Get the location
    #set ($location = $response.get($property)[0])
    ## Set the collected information
    #set ($discard = $responseData.put('location', $location))
    #set ($includePopup = true)
    #setDataFromDoc($responseData $includePopup $title $popupContent $response.get('fullname'))
    ## Check for custom marker icon
    #checkMarkerIcon($response.get('fullname') $responseData)
    ## Add the collected data into array
    #set ($discard = $mapDataArr.add($responseData))
  #end
#end

## Process location property data
#macro (processCustomLocationClass $classData)
  ## Set property names of class for query
  #set ($latProp = 'property.' + $classData.get('className') + '.' + $classData.get('latitude'))
  #set ($lngProp = 'property.' + $classData.get('className') + '.' + $classData.get('longitude'))
  #set ($includePopupField = 'property.' + $classData.get('className') + '.includePopup_boolean')
  #set ($optionsField = 'property.' + $classData.get('className') + '.options')
  ## Get full key for latitude and longitude
  #set ($latProp = "#getFullKey(${response} ${latProp})")
  #set ($latProp = $latProp.trim())
  #set ($lngProp = "#getFullKey(${response} ${lngProp})")
  #set ($lngProp = $lngProp.trim())
  #set ($optionsField = "#getFullKey(${response} ${optionsField})")
  #set ($optionsField = $optionsField.trim())
  ## Handling unknown suffixes END
  #if ("$!response.get(${latProp})" != '' &amp;&amp; "$!response.get(${lngProp})" != '' )
    #set ($responseData = {})
    #set ($discard = $responseData.put('type', 'point'))
    ## Get document title and content
    #set ($title = $response.get('title_'))
    #set ($popupContent = $response.get('doccontentraw_'))
    ## Get the location
    #set ($location = [])
    #set ($discard = $location.add($response.get(${latProp})[0]))
    #set ($discard = $location.add($response.get(${lngProp})[0]))
    ## Set the collected information
    #set ($discard = $responseData.put('location', $location))
    #set ($includePopup = $response.get($includePopupField)[0])
    #if ("$!includePopup" == '')
      #set ($includePopup = true)
    #end
    ## Set options for the point
    #set ($pointOptions = $response.get(${optionsField})[0])
    #set ($discard = $responseData.put('options', $!pointOptions))
    #setDataFromDoc($responseData $includePopup $title $popupContent $response.get('fullname'))
    ## Check for custom marker icon
    #checkMarkerIcon($response.get('fullname') $responseData)
    ## Add the collected data into array
    #set ($discard = $mapDataArr.add($responseData))
  #end
#end

## Process all path points
#macro (getPathPointsJSON)
  #set ($pointPagesKey = "#getFullKey(${response} 'property.Maps.Code.PathClass.pointPages')")
  #set ($pointPages = $response.get($pointPagesKey.trim()))
  #set ($pointPagesArr = [])
  #foreach ($pointPage in $pointPages)
    #set ($pointPageDoc = $xwiki.getDocument(${pointPage}))
    #set ($pointData = {})
    #set ($location = [])
    #set ($discard = $location.add($pointPageDoc.getValue('latitude')))
    #set ($discard = $location.add($pointPageDoc.getValue('longitude')))
    #set ($discard = $pointData.put('location', $location))
    #set ($discard = $pointData.put('options', $pointPageDoc.getValue('options')))
    ## Use page's name if no title is set
    #if ("$!pointPageDoc.title" == '')
      #set ($pointPageTitle = $pointPageDoc.name)
    #else
      #set ($pointPageTitle = $pointPageDoc.title)
    #end
    #setDataFromDoc($pointData $pointPageDoc.get('includePopup') $pointPageTitle $pointPageDoc.getContent())
    #checkMarkerIcon($pointPageDoc.getDocumentReference().getLocalDocumentReference() $pointData)
    #set ($disard = $pointPagesArr.add(${pointData}))
  #end
  #if ($pointPagesArr.size() &gt; 0)
    $jsontool.serialize($pointPagesArr)
  #end
#end

## Set values for popup
#macro (setDataFromDoc $dataMap $includePopup $title $rawPopupContent $docFullname)
  ## Get and set all the required popup data
  #if ($includePopup &amp;&amp; $mapObjMapping.get('includePopups') == 1)
    #set ($discard = $dataMap.put('includePopup', $includePopup))
  #end
  ## Get document content as html
  #set ($popupContent = "#getHtml(${rawPopupContent})")
  #set ($discard = $dataMap.put('title', $title))
  #set ($discard = $dataMap.put('content', $popupContent))
  #if ($docFullname)
    #set ($discard = $dataMap.put('doclocation', $docFullname))
  #end
#end

## Handle the response of solr query
#macro (handleSolrResponse $searchResponse)
  #set ($mapDataArr = [])
  #foreach ($response in $searchResponse.getResults())
    ## Check for custom location properties
    #if (!$customLocationProperties.isEmpty())
      #foreach ($customProp in $mapObjMapping.get('customLocationProperties'))
        #processLocationProperty($customProp.trim())
      #end
    #end
    ## Custom Point classes
    #if (!$allLocationClasses.isEmpty())
      #foreach ($locationClass in $allLocationClasses)
        #set ($locationClassName = $locationClass.get('className'))
        #if ($response.get('class').contains($locationClassName))
          #processCustomLocationClass($locationClass)
        #end
      #end
    #end
    ## Point END
    ## Check for PathClass and process path
    #if ($response.get('class').contains('Maps.Code.PathClass'))
      #set ($responseData = {})
      #set ($discard = $responseData.put('type', 'path'))
      ## Get all the required path data and path page data
      #set ($includePopup = $response.get('property.Maps.Code.PathClass.includePopup_boolean')[0])
      #set ($title = $response.get('title_'))
      #set ($popupContent = $response.get('doccontentraw_'))
      #setDataFromDoc($responseData $includePopup $title $popupContent $response.get('fullname'))
      ## Get data of each point
      ## Process and convert points data to JSON
      #set ($pointPagesJSON = "#getPathPointsJSON")
      #if ("$!pointPagesJSON" != '')
        #set ($discard = $responseData.put('points', "#getPathPointsJSON"))
        ## Add the path data to the main map data array
        #set ($discard = $mapDataArr.add($responseData))
      #end
    #end
    ## Path END
    ## Check for shape and process it
    #if ($response.get('class').contains('Maps.Code.ShapeClass'))
      #set ($responseData = {})
      #set ($discard = $responseData.put('type', 'shape'))
      #set ($discard = $responseData.put('index', $response.get('property.Maps.Code.ShapeClass.index_int')[0]))
      #set ($shapeGeoJSONKey = "#getFullKey(${response} 'property.Maps.Code.ShapeClass.shapeGeoJSON')")
      #set ($discard = $responseData.put('shapeGeoJSON', $response.get($shapeGeoJSONKey.trim())[0]))
      #set ($shapeStyleKey = "#getFullKey(${response} 'property.Maps.Code.ShapeClass.style')")
      #set ($discard = $responseData.put('style', $response.get($shapeStyleKey.trim())[0]))
      ## Set information for the popup
      #set ($includePopup = $response.get('property.Maps.Code.ShapeClass.includePopup_boolean')[0])
      #set ($title = $response.get('title_'))
      #set ($popupContent = $response.get('doccontentraw_'))
      #setDataFromDoc($responseData $includePopup $title $popupContent $response.get('fullname'))
      #set ($discard = $mapDataArr.add($responseData))
    #end
    ## Shapes END
    ## Check for indoor structure and process it
    #if ($response.get('class').contains('Maps.Code.IndoorClass'))
      #set ($responseData = {})
      #set ($discard = $responseData.put('type', 'indoor'))
      #set ($discard = $responseData.put('title', $response.get('title_')))
      #set ($discard = $responseData.put('doclocation', $response.get('fullname')))
      ## Get raw indoor structure data
      #set ($indoorLevelsKey = "#getFullKey(${response} 'property.Maps.Code.IndoorClass.levels')")
      #set ($rawIndoorData = $response.get($indoorLevelsKey.trim())[0])
      #set ($allLevels = $rawIndoorData.split('\n'))
      #if ("$!rawIndoorData" != '')
        #set ($levelsData = {})
        ## Process each level data of indoor
        #foreach ($level in $allLevels)
          #set ($levelItemsArr = [])
          #set ($singleLevelData = $level.trim().split(':'))
          #set ($levelItems = $singleLevelData[1].split(','))
          #foreach ($levelItem in $levelItems)
            #set ($levelItemMap = {})
            #set ($itemDoc = $xwiki.getDocument($levelItem.trim()))
            #if ("$!itemDoc.getObject('Maps.Code.ShapeClass')" != '')
              #set ($discard = $levelItemMap.put('type', 'shape'))
              #set ($discard = $levelItemMap.put('title', $itemDoc.getTitle()))
              #set ($popupContent = "#getHtml(${itemDoc.getContent()})")
              #set ($discard = $levelItemMap.put('content', $popupContent))
              #set ($discard = $levelItemMap.put('includePopup', $itemDoc.getValue('includePopup')))
              #set ($discard = $levelItemMap.put('shapeGeoJSON', $itemDoc.getValue('shapeGeoJSON')))
              #set ($discard = $levelItemMap.put('style', $itemDoc.getValue('style')))
              #set ($discard = $levelItemsArr.add($levelItemMap))
            #elseif ("$!itemDoc.getObject('Maps.Code.PointClass')" != '')
              #set ($discard = $levelItemMap.put('type', 'point'))
              #set ($discard = $levelItemMap.put('title', $itemDoc.getTitle()))
              #set ($popupContent = "#getHtml(${itemDoc.getContent()})")
              #set ($discard = $levelItemMap.put('content', $popupContent))
              #set ($discard = $levelItemMap.put('includePopup', $itemDoc.getValue('includePopup')))
              #set ($location = [])
              #set ($discard = $location.add($itemDoc.getValue('latitude')))
              #set ($discard = $location.add($itemDoc.getValue('longitude')))
              #set ($discard = $levelItemMap.put('location', $location))
              #set ($discard = $levelItemMap.put('options', $itemDoc.getValue('options')))
              ## Check for custom marker icon
              #checkMarkerIcon($itemDoc.getFullName() $levelItemMap)
              #set ($discard = $levelItemsArr.add($levelItemMap))
            #end
          #end
          #set ($discard = $levelsData.put($singleLevelData[0].trim(), $levelItemsArr))
        #end
        #set ($discard = $responseData.put('allIndoorData', $levelsData))
        #set ($discard = $mapDataArr.add($responseData))
      #end
    #end
    ## Indoor END
  #end
  $jsontool.serialize($mapDataArr)
#end

## Run the solr query and get data for map in json
#macro (handleMapQuery $queryStatement)
  #set ($query = $services.query.createQuery($queryStatement, 'solr'))
  #set ($discard = $query.bindValue('fq', '{!q.op=AND} type:DOCUMENT'))
  #set ($searchResponse = $query.execute()[0])
  #set ($mapData = "#handleSolrResponse(${searchResponse})")
  $mapData
#end

##
## The macros below belong to Main.SolrSearchMacros and have been altered to support map queries
##

#macro (getMapResults)
  ## $queryStatement is set before using the macro
  #if ($text != '')
    #set ($queryString = "($!{queryStatement}) AND ($!{text})")
  #else
    #set ($queryString = "($!{queryStatement})")
  #end
  ##
  ## Create the query and set the query string.
  #set ($query = $services.query.createQuery($queryString, 'solr'))
  ##
  ## Set query parameters.
  #set ($discard = $query.setLimit(50))
  #set ($discard = $query.setOffset($start))
  #set ($discard = $query.bindValue('sort', "${sort} ${sortOrder}"))
  #set ($discard = $query.bindValue('tie', $solrConfig.tieBreaker))
  #set ($discard = $query.bindValue('mm', $solrConfig.minShouldMatch))
  #set ($discard = $query.bindValue('fq', 'type:DOCUMENT'))
  ## Sort shapes according to their index
  #set ($discard = $query.bindValue('sort', 'property.Maps.Code.ShapeClass.index_sortInt asc'))
  #setQueryFields($query)
  #setPhraseFields($query)
  #setFacetFields($query)
  #setFilterQuery($query)
  #setHighlightQuery($query)
  #if ($debug)
    #set ($discard = $query.bindValue('debugQuery', 'on'))
  #end
  ##
  ## Execute the query.
  #set ($searchResponse = $query.execute()[0])
#end

## Main macro for combining all macros and displaying map ui
#macro (displayMapUI)
  #set($void = $services.progress.startStep('#displaySearchUI'))
  #set($void = $services.progress.pushLevel())
  #set ($discard = $xwiki.ssx.use('Main.SolrSearch'))
  #set ($discard = $xwiki.jsx.use('Main.SolrSearch'))
  ## Disable the document extra data: comments, attachments, history...
  #set ($displayDocExtra = false)
  #processRequestParameters()
  (% class="search-ui" %)(((
    #if ($xcontext.action == 'get')
      {{html clean="false"}}
      ## The search UI is updated dynamically through AJAX and we need to pull the skin extensions.
      ## We put the skin extension imports inside a &lt;noscript&gt; element to prevent jQuery from fetching the JavaScript
      ## files automatically (we want to fetch only the new JavaScript files).
      &lt;noscript class="hidden skin-extension-imports"&gt;#skinExtensionHooks&lt;/noscript&gt;
      {{/html}}
    #end
    ## Get all custom point classes. Filter the results according to classes
    #foreach ($locationClass in $allLocationClasses)
      #set ($locationClassName = $locationClass.get('className').trim())
      #set ($solrConfig.filterQuery[1] = "${solrConfig.filterQuery[1]} OR class:${locationClassName}")
    #end
    ## Get all custom location field properties. Filter the results according to object properties to look for
    #foreach ($customProp in $mapObjMapping.get('customLocationProperties'))
      #set ($customProp = $customProp.trim())
      #set ($solrConfig.filterQuery[1] = "${solrConfig.filterQuery[1]} OR ${customProp}:*")
    #end
    ## Check if facets are enabled by the user
    #if ($mapObjMapping.get('includeFacets') == 0)
      #set ($facetEnabled = false)
    #end
    ## Add custom facet fields specified by the user to solr config
    #if ($facetEnabled)
      #foreach ($facetField in $mapObjMapping.get('facetFields'))
        #set ($facetField = $facetField.trim())
        #set ($discard = $solrConfig.facetFields.add($facetField))
      #end
    #end
    ## Execute the query to get map results
    #getMapResults()
    ##{{code language="none"}}$searchResponse.results{{/code}}
    #if ($debug)
      #displaySearchDebugInfo()
    #end
    #set ($mapData = "#handleSolrResponse(${searchResponse})")
    #set ($mapData = $mapData.replaceAll("'", '&amp;apos;'))
    (% class="search-results-container row" %)(((
      (% class="map-results col-xs-12" %)
      (((
        ## $mapId, $mapObjJSON are already set before using this macro
        {{html wiki="true" clean="false"}}
        (% class="map-wrapper#if ($request.mfullscreen) fullscreen#end" %)(((
          (% class="map-container" id="map-${mapId}" data-options='${mapObjJSON}' data-mapdata='${mapData}' style="width: $mapSize[0]; height: $mapSize[1];" %)((()))
          ## Check to see if a facet is selected. If so, show the search widget and refine search area
          #set ($facetSelected = false)
          #if ($facetEnabled)
            #foreach ($entry in $request.parameterMap.entrySet())
              #if ($entry.key.startsWith('f_') || $entry.key.startsWith('l_'))
                #set ($facetSelected = true)
              #end
            #end
          #end
          (% class="map-search-filter#if ($request.msearchw || ($request.msearchw &amp;&amp; $facetSelected)) open#end" %)(((
            #displaySearchForm()
            #displayMapSearchFilter()
          )))
          &lt;div id="map-search-close"&gt;&lt;i class="fa fa-arrow-left"&gt;&lt;/i&gt;&lt;/div&gt;
        )))
        {{/html}}
      )))
    )))
  )))
  #set($void = $services.progress.popLevel())
  #set($void = $services.progress.endStep())
#end

## Displaying map search form
#macro(displaySearchForm)
  #set($void = $services.progress.startStep('#displaySearchForm'))
  #set($void = $services.progress.pushLevel())
  {{html clean="false"}}
  &lt;form class="map-search-form" action="$doc.getURL()" role="search"&gt;
    &lt;div class="hidden"&gt;
      &lt;input type="hidden" name="sort" value="$!escapetool.xml($sort)"/&gt;
      &lt;input type="hidden" name="sortOrder" value="$!escapetool.xml($sortOrder)"/&gt;
      &lt;input type="hidden" name="highlight" value="$highlightEnabled"/&gt;
      &lt;input type="hidden" name="facet" value="$facetEnabled"/&gt;
      ## The parameter used to determine if the request has been redirected with default search filters.
      &lt;input type="hidden" name="r" value="$!escapetool.xml($request.r)"/&gt;
      #if ("$!request.debug" != '')
        &lt;input type="hidden" name="debug" value="$escapetool.xml($request.debug)"/&gt;
      #end
      ## Preserve the current facet values when submitting a new search query.
      #foreach ($entry in $request.parameterMap.entrySet())
        #if ($entry.key.startsWith('f_') || $entry.key.startsWith('l_'))
          #foreach ($value in $entry.value)
            &lt;input type="hidden" name="$escapetool.xml($entry.key)" value="$escapetool.xml($value)"/&gt;
          #end
        #end
      #end
    &lt;/div&gt;
    ## $mabObj is set in MapSheet
    &lt;div class="map-search"&gt;
      &lt;div class="map-search-input-wrapper"&gt;
        #if("$!mapObj.get('includeSearch')" == 'Yes')
        &lt;div class="fa fa-ellipsis-v" id="search-type-btn"&gt;&lt;/div&gt;
        #end
        &lt;input type="search" name="text" class="form-control withTip useTitleAsTip map-search-input"
          title="$services.localization.render('intmap.search.placeholder')" value="$escapetool.xml($text)"/&gt;
        &lt;button type="submit" class="btn btn-primary map-search-btn"&gt;
          &lt;span class="fa fa-search"&gt;&lt;/span&gt;
        &lt;/button&gt;
      &lt;/div&gt;
      #if("$!mapObj.get('includeSearch')" == 'Yes')
        &lt;div class="search-types xformInline"&gt;
          &lt;p&gt;$services.localization.render('intmap.search.searchType'):&lt;/p&gt;
          &lt;input type="radio" name="search-type" id="item" value="item" checked&gt;
          &lt;label for="item"&gt;$services.localization.render('intmap.search.item')&lt;/label&gt;
          &lt;input type="radio" name="search-type" id="location" value="location"&gt;
          &lt;label for="location"&gt;$services.localization.render('intmap.search.location')&lt;/label&gt;
        &lt;/div&gt;
      #end
    &lt;/div&gt;
  &lt;/form&gt;
  {{/html}}
  #set($void = $services.progress.popLevel())
  #set($void = $services.progress.endStep())
#end

## Map facets and search results
#macro (displayMapSearchFilter)
  #if ($mapDataArr.size() &gt; 0)
    #if ($facetEnabled)
      (% class="map-results-section#if ($request.mfacetsection || ($request.mfacetsection &amp;&amp; $facetSelected)) open#end" id="show-search-facets" %)(((
        $services.localization.render('intmap.search.refineSearch') &lt;i class="fa fa-caret-left"&gt;&lt;/i&gt;
      )))
      (% class="map-filters#if ($request.mfacetsection || ($request.mfacetsection &amp;&amp; $facetSelected)) open#end" %)(((
        #displaySearchFacets($searchResponse)
      )))
    #end
    (% class="map-results-section#if ($request.msearchitemsection) open#end" id="show-search-items" %)(((
      $services.localization.render('intmap.search.showResults') &lt;i class="fa fa-caret-left"&gt;&lt;/i&gt;
    )))
    (% class="search-item-results#if ($request.msearchitemsection) open#end" %)(((
      #foreach ($item in $mapDataArr)
      (% class="search-result-item" %)(((
        ==== [[$item.get('title')&gt;&gt;$item.get('doclocation')||target="_blank"]] ====
        #if ($item.get('type') == 'point')
          (% class="goto-loc goto-loc-point" data-location="${item.get('location')}" title="$services.localization.render('intmap.search.gotoLoc')" %)(((
            &lt;i class="fa fa-map-marker"&gt;&lt;/i&gt;
          )))
        #elseif ($item.get('type') == 'path')
          #set ($allPointsLocation = [])
          #foreach ($point in $jsontool.fromString($item.points))
            #set ($discard = $allPointsLocation.add(${point.location}))
          #end
          #set ($allPointsLocation = $jsontool.serialize($allPointsLocation))
          (% class="goto-loc goto-loc-points" data-location='{"points": ${allPointsLocation} }' title="$services.localization.render('intmap.search.gotoLoc')" %)(((
            &lt;i class="fa fa-map-marker"&gt;&lt;/i&gt;
          )))
        #elseif ($item.get('type') == 'shape')
          #set ($shapeGeoJSON = $jsontool.fromString($item.get('shapeGeoJSON')))
          #set ($allPoints = [])
          #if ("$!shapeGeoJSON.geometry" != '' || $shapeGeoJSON.features.size() &gt; 0)
            #if ("$!shapeGeoJSON.features[0].geometry.coordinates[0][0]" == '' &amp;&amp; "$!shapeGeoJSON.features[0].geometry.coordinates" != '') ## Check for circle (has only one point)
              #set ($allPoints = [$shapeGeoJSON.features[0].geometry.coordinates])
            #elseif ("$!shapeGeoJSON.features[0].geometry.coordinates" != '')
              #set ($allPoints = $shapeGeoJSON.features[0].geometry.coordinates)
            #elseif ("$!shapeGeoJSON.geometry.coordinates[0][0]" == '' &amp;&amp; "$!shapeGeoJSON.geometry.coordinates" != '') ## Check for circle (has only one point)
              #set ($allPoints = [$shapeGeoJSON.geometry.coordinates])
            #elseif ("$!shapeGeoJSON.geometry.coordinates" != '')
              #set ($allPoints = $shapeGeoJSON.geometry.coordinates)
            #else
              #set ($allPoints = [$shapeGeoJSON.geometry.coordinates])
            #end
          #end
          #foreach ($coordinate in $allPoints)
            #set ($discard = $collectionstool.reverse($coordinate))
            #foreach ($coordinate1 in $coordinate)
              #set ($discard = $collectionstool.reverse($coordinate1))
              #foreach ($coordinate2 in $coordinate1)
                #set ($discard = $collectionstool.reverse($coordinate2))
                #foreach ($coordinate3 in $coordinate2)
                  #set ($discard = $collectionstool.reverse($coordinate3))
                #end
              #end
            #end
          #end
          #if ($allPoints.size() &gt; 0)
            #set ($allPoints = $jsontool.serialize($allPoints))
            (% class="goto-loc goto-loc-points" data-location='{"points": ${allPoints} }' title="$services.localization.render('intmap.search.gotoLoc')" %)(((
              &lt;i class="fa fa-map-marker"&gt;&lt;/i&gt;
            )))
          #end
        #elseif ($item.get('type') == 'indoor')
          ## No go to location icon
        #end
      )))
      #end
    )))
  #end
#end

## Simple search form for only location search
#macro(displayLocationSearch)
  {{html clean="false"}}
  &lt;div class="map-search-form"&gt;
    &lt;div class="map-search"&gt;
      &lt;div class="map-search-input-wrapper"&gt;
        &lt;input type="search" name="text" class="form-control withTip useTitleAsTip map-search-input"
          title="$services.localization.render('intmap.search.placeholder')" value=""/&gt;
        &lt;button type="search" class="btn btn-primary map-search-btn"&gt;
          &lt;span class="fa fa-search"&gt;&lt;/span&gt;
        &lt;/button&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  {{/html}}
#end

##
## Facet macros
##

#macro (displaySearchFacetBody $facetField)
  &lt;div class="search-facet-body"&gt;
    #set ($facetDisplayer = $solrConfig.facetDisplayers.get($facetField.name))
    #if (!$facetDisplayer &amp;&amp; $facetField.name.startsWith('property.'))
      ## Choose a facet displayer based on the property type.
      #getXClassProperty($facetField.name $property)
      ## We rely on configuration instead of using a naming convention like "Main.Solr${property.classType}Facet"
      ## because most of the property types don't need a custom facet displayer.
      #set ($facetDisplayer = $solrConfig.facetDisplayersByPropertyType.get($property.classType))
    #end
    ###displaySearchFacetValues($facetValues)
    ## Below code does not render the facets properly
    #if ($facetDisplayer)
      #set ($facetDisplayer = $xwiki.getDocument($facetDisplayer))
      #if ("$!facetDisplayer.content" != '')
        #set ($script = $!facetDisplayer.content.replaceAll('\{\{(.+?)\}\}', '')) ## Remove all macros
        #evaluate($script)
      #else
        #displaySearchFacetValues($facetValues)
      #end
    #else
      #displaySearchFacetValues($facetValues)
    #end
  &lt;/div&gt;
#end

#macro (displaySearchFacets $searchResponse)
  #set($void = $services.progress.startStep('#displaySearchFacets'))
  (% class="search-facets collapsed-xs xform" %)(((
    {{html clean="false"}}
      #foreach ($facetField in $searchResponse.facetFields)
        #displaySearchFacet($facetField)
      #end
    {{/html}}
  )))
  #set($void = $services.progress.endStep())
#end

##
## Simple common macros
##

## Process the property of a class for edit or display
#macro (displayClassProperty $prop)
  &lt;dt&gt;
    &lt;label for="${class.name}_${class.number}_${prop.name}"&gt;$prop.prettyName&lt;/label&gt;
    #if($prop.hint)&lt;span class="xHint"&gt;$prop.hint&lt;/span&gt;#end
  &lt;/dt&gt;
  &lt;dd&gt;
    $doc.display($prop.name)
  &lt;/dd&gt;
#end

## Get key value from hashmap whose key starts with the given string
#macro (getFullKey $valuesMap $shortKey)
  #set ($fullKey = '')
  #foreach ($key in $valuesMap.keySet())
    #if ($key.startsWith($shortKey))
      #set ($fullKey = $key)
      #break
    #end
  #end
  $fullKey
#end
{{/velocity}}</content>
</xwikidoc>
