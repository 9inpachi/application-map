<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Maps.Code.CommonMacros" locale="">
  <web>Maps.Code</web>
  <name>CommonMacros</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>xwiki:Maps.Code.LeafletUtils</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>CommonMacros</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{velocity output="false"}}
#set ($solrConfig = {
  'filterQuery': [
    'type:DOCUMENT', 'class:Maps.Code.PointClass OR class:Maps.Code.PathClass'
  ],
  'facetFields': []
})
{{/velocity}}

{{include reference="Main.SolrSearchConfig"/}}

{{include reference="Main.SolrSearchMacros"/}}

{{velocity output="false"}}
## Get HTML from XWiki/2.1 syntax
#macro (getHtml $xwiki)
  #set ($xdom = $services.rendering.parse($xwiki, "xwiki/2.1"))
  $services.rendering.render($xdom, "xhtml/1.0")
#end
## Check marker icon
#macro (checkMarkerIcon $pageName $variable)
  ## Get attachment URL for marker icon if attachment name starts with 'marker'
  #set ($targetDoc = $xwiki.getDocument(${pageName}))
  #foreach ($attachment in $targetDoc.getAttachmentList())
    #set ($attachmentName = $attachment.getFilename())
    #if ($attachmentName.toLowerCase().startsWith('marker'))
      #set ($attachmentURL = $targetDoc.getAttachmentURL($attachmentName))
      #set ($discard = $variable.put('markerIcon', $attachmentURL))
    #end
  #end
#end
## Process location property data
#macro (processLocationProperty $property)
  ## Check if the page contains the object property
  #if ("$!response.get(${property})" != '')
    #set ($responseData = {})
    #set ($discard = $responseData.put('type', 'point'))
    #set ($discard = $responseData.put('doclocation', $response.get('fullname')))
    ## Get document title
    #set ($title = $response.get('title_'))
    ## Get document content as html
    #set ($popupContent = "#getHtml($response.get('doccontentraw_'))")
    ## Get the location
    #set ($location = $response.get($property)[0])
    ## Set the collected information
    #set ($discard = $responseData.put('title', $title))
    #set ($discard = $responseData.put('location', $location))
    #set ($discard = $responseData.put('popupContent', $popupContent))
    ## Check for custom marker icon
    #checkMarkerIcon($response.get('fullname') $responseData)
    ## Add the collected data into array
    #set ($discard = $mapDataArr.add($responseData))
  #end
#end
## Handle the response of solr query
#macro (handleSolrResponse $searchResponse)
  #set ($mapDataArr = [])
  #foreach ($response in $searchResponse.getResults())
    ## Check for PointClass
    #processLocationProperty('property.Maps.Code.PointClass.location_string')
    ## Check for custom location properties
    #if (!$customLocationProperties.isEmpty())
      #foreach ($customProp in $mapObjMapping.get('customLocationProperties'))
        #processLocationProperty($customProp.trim())
      #end
    #end
    ## Check for PathClass and process path
    #if ($response.get('class').contains('Maps.Code.PathClass'))
      #set ($responseData = {})
      #set ($discard = $responseData.put('type', 'path'))
      ## Get all the required path data and path page data
      #set ($includePopup = $response.get('property.Maps.Code.PathClass.addPopup_boolean')[0])
      #set ($discard = $responseData.put('addPopup', $includePopup))
      #set ($title = $response.get('title_'))
      #set ($popupContent = "#getHtml($response.get('doccontentraw_'))")
      #set ($discard = $responseData.put('title', $title))
      #set ($discard = $responseData.put('popupContent', $popupContent))
      #set ($discard = $responseData.put('doclocation', $response.get('fullname')))
      ## Get data of each point
      ## Process and convert source data to JSON
      #set ($sourcePage = $response.get('property.Maps.Code.PathClass.sourcePointPage_string')[0])
      #set ($sourcePageDoc = $xwiki.getDocument(${sourcePage}))
      #set ($sourceData = {})
      #set ($discard = $sourceData.put('location', $sourcePageDoc.get('location')))
      #set ($discard = $sourceData.put('title', $sourcePageDoc.getTitle()))
      #set ($discard = $sourceData.put('popupContent', "#getHtml(${sourcePageDoc.getContent()})"))
      #set ($discard = $responseData.put('source', $jsontool.serialize(${sourceData})))
      ## Process and convert destination data to JSON
      #set ($destinationPage = $response.get('property.Maps.Code.PathClass.destinationPointPage_string')[0])
      #set ($destPageDoc = $xwiki.getDocument(${destinationPage}))
      #set ($destData = {})
      #set ($discard = $destData.put('location', $destPageDoc.get('location')))
      #set ($discard = $destData.put('title', $destPageDoc.getTitle()))
      #set ($discard = $destData.put('popupContent', "#getHtml(${destPageDoc.getContent()})"))
      #set ($discard = $responseData.put('destination', $jsontool.serialize(${destData})))
      ## Add the path data to the main map data array
      #set ($discard = $mapDataArr.add($responseData))
    #end
  #end
  $jsontool.serialize($mapDataArr)
#end
## Run the solr query and get data for map in json
#macro (handleMapQuery $queryStatement)
  #set ($query = $services.query.createQuery($queryStatement, 'solr'))
  #set ($discard = $query.bindValue('fq', '{!q.op=AND} type:DOCUMENT'))
  #set ($searchResponse = $query.execute()[0])
  #set ($mapData = "#handleSolrResponse(${searchResponse})")
  $mapData
#end

##
## The macros below belong to Main.SolrSearchMacros and have been altered to support map queries
##

#macro (getMapResults)
  ## $queryStatement is set before using the macro
  #if ($text != '')
    #set ($queryString = "($!{queryStatement}) AND ($!{text})")
  #else
    #set ($queryString = "($!{queryStatement})")
  #end
  ##
  ## Create the query and set the query string.
  #set ($query = $services.query.createQuery($queryString, 'solr'))
  ##
  ## Set query parameters.
  #set ($discard = $query.setLimit(50))
  #set ($discard = $query.setOffset($start))
  #set ($discard = $query.bindValue('sort', "${sort} ${sortOrder}"))
  #set ($discard = $query.bindValue('tie', $solrConfig.tieBreaker))
  #set ($discard = $query.bindValue('mm', $solrConfig.minShouldMatch))
  #set ($discard = $query.bindValue('fq', 'type:DOCUMENT'))
  #setQueryFields($query)
  #setPhraseFields($query)
  #setFacetFields($query)
  #setFilterQuery($query)
  #setHighlightQuery($query)
  #if ($debug)
    #set ($discard = $query.bindValue('debugQuery', 'on'))
  #end
  ##
  ## Execute the query.
  #set ($searchResponse = $query.execute()[0])
#end
#macro (displayMapUI)
  #set($void = $services.progress.startStep('#displaySearchUI'))
  #set($void = $services.progress.pushLevel())
  #set ($discard = $xwiki.ssx.use('Main.SolrSearch'))
  #set ($discard = $xwiki.jsx.use('Main.SolrSearch'))
  ## Disable the document extra data: comments, attachments, history...
  #set ($displayDocExtra = false)
  #processRequestParameters()
  (% class="search-ui" %)(((
    #if ($xcontext.action == 'get')
      {{html clean="false"}}
      ## The search UI is updated dynamically through AJAX and we need to pull the skin extensions.
      ## We put the skin extension imports inside a &lt;noscript&gt; element to prevent jQuery from fetching the JavaScript
      ## files automatically (we want to fetch only the new JavaScript files).
      &lt;noscript class="hidden skin-extension-imports"&gt;#skinExtensionHooks&lt;/noscript&gt;
      {{/html}}
    #end
    ## Get all custom location field properties. Filter the results according to object properties to look for
    #foreach ($customProp in $mapObjMapping.get('customLocationProperties'))
      #set ($customProp = $customProp.trim())
      #set ($solrConfig.filterQuery[1] = "${solrConfig.filterQuery[1]} OR ${customProp}:*")
    #end
    ## Check if facets are enabled by the user
    #if ($mapObjMapping.get('includeFacets') == 0)
      #set ($facetEnabled = false)
    #end
    ## Add custom facet fields specified by the user to solr config
    #if ($facetEnabled)
      #foreach ($facetField in $mapObjMapping.get('facetFields'))
        #set ($facetField = $facetField.trim())
        #set ($discard = $solrConfig.facetFields.add($facetField))
      #end
    #end
    ## Execute the query to get map results
    #getMapResults()
    #if ($debug)
      #displaySearchDebugInfo()
    #end
    #set ($mapData = "#handleSolrResponse(${searchResponse})")
    #set ($mapData = $mapData.replaceAll("'", '\\"'))
    (% class="search-results-container row" %)(((
      (% class="map-results col-xs-12" %)
      (((
        ## $mapId, $mapObjJSON are already set before using this macro
        {{html wiki="true" clean="false"}}
        (% class="map-wrapper#if ($request.mfullscreen) fullscreen#end" %)(((
          (% class="map-container" id="map-${mapId}" data-options='${mapObjJSON}' data-mapdata='${mapData}' style="width: $mapSize[0]; height: $mapSize[1];" %)((()))
          ## Check to see if a facet is selected. If so, show the search widget and refine search area
          #set ($facetSelected = false)
          #if ($facetEnabled)
            #foreach ($entry in $request.parameterMap.entrySet())
              #if ($entry.key.startsWith('f_') || $entry.key.startsWith('l_'))
                #set ($facetSelected = true)
              #end
            #end
          #end
          (% class="map-search-filter#if ($request.msearchw || ($request.msearchw &amp;&amp; $facetSelected)) open#end" %)(((
            #displaySearchForm()
            #displayMapSearchFilter()
          )))
          &lt;div id="map-search-close"&gt;&lt;i class="fa fa-arrow-left"&gt;&lt;/i&gt;&lt;/div&gt;
        )))
        {{/html}}
      )))
    )))
  )))
  #set($void = $services.progress.popLevel())
  #set($void = $services.progress.endStep())
#end

#macro(displaySearchForm)
  #set($void = $services.progress.startStep('#displaySearchForm'))
  #set($void = $services.progress.pushLevel())
  {{html clean="false"}}
  &lt;form class="map-search-form" action="$doc.getURL()" role="search"&gt;
    &lt;div class="hidden"&gt;
      &lt;input type="hidden" name="sort" value="$!escapetool.xml($sort)"/&gt;
      &lt;input type="hidden" name="sortOrder" value="$!escapetool.xml($sortOrder)"/&gt;
      &lt;input type="hidden" name="highlight" value="$highlightEnabled"/&gt;
      &lt;input type="hidden" name="facet" value="$facetEnabled"/&gt;
      ## The parameter used to determine if the request has been redirected with default search filters.
      &lt;input type="hidden" name="r" value="$!escapetool.xml($request.r)"/&gt;
      #if ("$!request.debug" != '')
        &lt;input type="hidden" name="debug" value="$escapetool.xml($request.debug)"/&gt;
      #end
      ## Preserve the current facet values when submitting a new search query.
      #foreach ($entry in $request.parameterMap.entrySet())
        #if ($entry.key.startsWith('f_') || $entry.key.startsWith('l_'))
          #foreach ($value in $entry.value)
            &lt;input type="hidden" name="$escapetool.xml($entry.key)" value="$escapetool.xml($value)"/&gt;
          #end
        #end
      #end
    &lt;/div&gt;
    ## $mabObj is set in MapSheet
    &lt;div class="map-search"&gt;
      &lt;div class="map-search-input-wrapper"&gt;
        #if("$!mapObj.get('includeSearch')" == 'Yes')
        &lt;div class="fa fa-ellipsis-v" id="search-type-btn"&gt;&lt;/div&gt;
        #end
        &lt;input type="search" name="text" class="form-control withTip useTitleAsTip map-search-input"
          title="$services.localization.render('intmap.search.placeholder')" value="$escapetool.xml($text)"/&gt;
        &lt;button type="submit" class="btn btn-primary map-search-btn"&gt;
          &lt;span class="fa fa-search"&gt;&lt;/span&gt;
        &lt;/button&gt;
      &lt;/div&gt;
      #if("$!mapObj.get('includeSearch')" == 'Yes')
        &lt;div class="search-types xformInline"&gt;
          &lt;p&gt;$services.localization.render('intmap.search.searchType'):&lt;/p&gt;
          &lt;input type="radio" name="search-type" id="item" value="item" checked&gt;
          &lt;label for="item"&gt;$services.localization.render('intmap.search.item')&lt;/label&gt;
          &lt;input type="radio" name="search-type" id="location" value="location"&gt;
          &lt;label for="location"&gt;$services.localization.render('intmap.search.location')&lt;/label&gt;
        &lt;/div&gt;
      #end
    &lt;/div&gt;
  &lt;/form&gt;
  {{/html}}
  #set($void = $services.progress.popLevel())
  #set($void = $services.progress.endStep())
#end

#macro (displayMapSearchFilter)
  #if ($facetEnabled)
    (% class="map-results-section#if ($request.mfacetsection || ($request.mfacetsection &amp;&amp; $facetSelected)) open#end" id="show-search-facets" %)(((
      $services.localization.render('intmap.search.refineSearch') &lt;i class="fa fa-caret-left"&gt;&lt;/i&gt;
    )))
    (% class="map-filters#if ($request.mfacetsection || ($request.mfacetsection &amp;&amp; $facetSelected)) open#end" %)(((
      #displaySearchFacets($searchResponse)
    )))
  #end
  #if ($mapDataArr.size() &gt; 0)
    (% class="map-results-section#if ($request.msearchitemsection) open#end" id="show-search-items" %)(((
      $services.localization.render('intmap.search.showResults') &lt;i class="fa fa-caret-left"&gt;&lt;/i&gt;
    )))
    (% class="search-item-results#if ($request.msearchitemsection) open#end" %)(((
      #foreach ($item in $mapDataArr)
      (% class="search-result-item" %)(((
        ==== [[$item.get('title')&gt;&gt;$item.get('doclocation')||target="_blank"]] ====
        #if ($item.get('type') == 'point')
          (% class="goto-loc goto-loc-point" data-location="${item.get('location')}" title="$services.localization.render('intmap.search.gotoLoc')" %)(((
            &lt;i class="fa fa-map-marker"&gt;&lt;/i&gt;
          )))
        #elseif ($item.get('type') == 'path')
          #set ($source = $item.source.replaceAll('"', "'"))
          #set ($destination = $item.destination.replaceAll('"', "'"))
          (% class="goto-loc goto-loc-path" data-location="{source: ${source}, destination: ${destination}}" title="$services.localization.render('intmap.search.gotoLoc')" %)(((
            &lt;i class="fa fa-map-marker"&gt;&lt;/i&gt;
          )))
        #end
      )))
      #end
    )))
  #end
#end

##
## Facet macros
##

#macro (displaySearchFacetBody $facetField)
  &lt;div class="search-facet-body"&gt;
    #set ($facetDisplayer = $solrConfig.facetDisplayers.get($facetField.name))
    #if (!$facetDisplayer &amp;&amp; $facetField.name.startsWith('property.'))
      ## Choose a facet displayer based on the property type.
      #getXClassProperty($facetField.name $property)
      ## We rely on configuration instead of using a naming convention like "Main.Solr${property.classType}Facet"
      ## because most of the property types don't need a custom facet displayer.
      #set ($facetDisplayer = $solrConfig.facetDisplayersByPropertyType.get($property.classType))
    #end
    ###displaySearchFacetValues($facetValues)
    ## Below code does not render the facets properly
    #if ($facetDisplayer)
      #set ($facetDisplayer = $xwiki.getDocument($facetDisplayer))
      #if ("$!facetDisplayer.content" != '')
        #set ($script = $!facetDisplayer.content.replaceAll('\{\{(.+?)\}\}', '')) ## Remove all macros
        #evaluate($script)
      #else
        #displaySearchFacetValues($facetValues)
      #end
    #else
      #displaySearchFacetValues($facetValues)
    #end
  &lt;/div&gt;
#end

#macro (displaySearchFacets $searchResponse)
  #set($void = $services.progress.startStep('#displaySearchFacets'))
  (% class="search-facets collapsed-xs xform" %)(((
    {{html clean="false"}}
      #foreach ($facetField in $searchResponse.facetFields)
        #displaySearchFacet($facetField)
      #end
    {{/html}}
  )))
  #set($void = $services.progress.endStep())
#end
{{/velocity}}</content>
</xwikidoc>
