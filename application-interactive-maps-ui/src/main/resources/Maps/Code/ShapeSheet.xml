<?xml version="1.1" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Maps.Code.ShapeSheet" locale="">
  <web>Maps.Code</web>
  <name>ShapeSheet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <parent>Maps.Code.ShapeClass</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <version>1.1</version>
  <title>#if($doc.documentReference.name == 'ShapeSheet')ShapeSheet#{else}$services.display.title($doc, {'displayerHint': 'default', 'outputSyntaxId': 'plain/1.0'})#end</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content>{{include reference="Maps.Code.CommonMacros" /}}

{{velocity}}
## If the point is being edited, then display the point editor
#if ($doc.documentReference.name == 'ShapeSheet')
  ## Do nothing
#else
  #set ($discard = $xwiki.ssx.use('Maps.Code.LeafletUtils'))
  #set ($discard = $xwiki.jsx.use('Maps.Code.LeafletUtils'))
  #set ($discard = $xwiki.jsx.use('Maps.Code.ShapeSheet'))
  #set($class = $doc.getObject('Maps.Code.ShapeClass').xWikiClass)
  #set($shapeObj = $doc.getObject('Maps.Code.ShapeClass'))
  #set ($shapeGeoJSON = $shapeObj.getValue('shapeGeoJSON'))
  #set ($shapeStyle = $shapeObj.getValue('styles'))
  {{html wiki="true" clean="false"}}
  (% class="row" %)(((
    (% class="col-sm-12" %)(((
      ## Preview of the map
      #if ($xcontext.action == 'edit')
      &lt;p class="xform"&gt;&lt;span class="xHint"&gt;$services.localization.render('intmap.shapeEditor.hint')&lt;/span&gt;&lt;/p&gt;
      #end
      (% class="map-wrapper" %)(((
         #if ($context.action == 'edit')
           &lt;div class="map-preview shape-editor-map-preview" id="map-${util.generateRandomString(5)}" style="width: 100%; height: 400px;"&gt;&lt;/div&gt;
         #else
           &lt;div class="map-preview map-shape-view" id="map-${util.generateRandomString(5)}" style="width: 100%; height: 400px;"&gt;&lt;/div&gt;
         #end
        (% class="map-search-filter" %)(((
          #displayLocationSearch()
        )))
        (% id="map-search-close" %)(((
        &lt;i class="fa fa-arrow-left"&gt;&lt;/i&gt;
        )))
      )))
      ----
    )))
    (% class="col-sm-12" %)(((
      {{html wiki='false'}}
        &lt;input type="hidden" id="shapeGeoJSON" name="Maps.Code.ShapeClass_0_shapeGeoJSON" value='$shapeGeoJSON' /&gt;
        &lt;input type="hidden" id="shapeStyle" value='$shapeStyle' /&gt;
      {{/html}}
      (% class="xform" %)(((
        &lt;dl&gt;
          #foreach($prop in $class.properties)
            #if ($prop.name != 'shapeGeoJSON')
              #displayClassProperty($prop)
            #end
          #end
        &lt;/dl&gt;
      )))
    )))
  )))
  {{/html}}
#end
{{/velocity}}</content>
  <object>
    <name>Maps.Code.ShapeSheet</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>42125f83-4d5b-4ce1-8e80-8add36d1d38a</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>requirejs.config({
  paths: {
    'leaflet-edit': ['$services.webjars.url("github-com-Leaflet-Leaflet-Editable", "1.1.0/Leaflet.Editable.js")'],
    'leaflet-drag': ['$services.webjars.url("leaflet.path.drag", "src/Path.Drag.js")']
  }
});
// Make sure to include jsx Maps.Code.LeafletUtils before including this jsx
require(['jquery', 'leaflet', 'leaflet-commons', 'leaflet-edit', 'leaflet-drag', 'bootstrap'], function ($, leaflet, leafletCommons) {
  'use strict';
  function init()
  {

    //Functions for shapes
    function updateShapesJSON (shapeGeoJSON, allShapesJSON, allShapes)
    {
      allShapesJSON = allShapes.toGeoJSON();
      shapeGeoJSON.val(JSON.stringify(allShapesJSON));
    }
    function processShapeLayer (layer, shapeGeoJSON, allShapesJSON, allShapes)
    {
      if (layer instanceof L.Circle) {
        layer.feature = layer.feature || {};
        layer.feature.type = layer.feature.type || 'Feature';
        layer.feature.geometry = layer.feature.geometry || {};
        layer.feature.geometry.type = 'Circle';
        layer.feature.properties = layer.feature.properties || {};
        layer.feature.properties.radius = layer.getRadius();
      }
      allShapes.addLayer(layer);
      updateShapesJSON(shapeGeoJSON, allShapesJSON, allShapes);
      layer.on('dblclick', function (e1) {
        layer.remove();
        allShapes.removeLayer(layer);
        updateShapesJSON(shapeGeoJSON, allShapesJSON, allShapes);
      });
      layer.on('move', function (e1) {
        updateShapesJSON(shapeGeoJSON, allShapesJSON, allShapes);
      });
    }

    //Getting shape style for both view and edit modes
    var shapeStyle;
    if ($('#shapeStyle').val() !== '') {
      try {
        shapeStyle = JSON.parse($('#shapeStyle').val());
      } catch (e) {
        new XWiki.widgets.Notification('Shape style is not valid.', 'error');
        shapeStyle = {};
      }
    } else {
      shapeStyle = {};
    }

    var map;

    //Render the map
    $$('.shape-editor-map-preview').each(function (element) {
      var mapId = $(element).attr('id').replace('map-', '');
      var options = {
        'id': mapId,
        'addFullscreen': 1,
        'includeCurrentLocation': 1,
        'editable': true
      };
      map = leafletCommons.createEmptyMap(options);
      map.on('click', function (e) {
        if ($(".leaflet-popup-pane").html() == '') {
          $('.map-search-filter').removeClass('open');
        }
      });
      leafletCommons.addShapeEditControls(map);

      //Shape editor place search
      leafletCommons.setupLocationSearchMP('.map-search', map);

      var $shapeGeoJSON = $('#shapeGeoJSON');
      var allShapes = L.featureGroup();
      var allShapesJSON;

      if ($shapeGeoJSON.val() !== '') {
        try {
          var currentGeoJSON = JSON.parse($shapeGeoJSON.val());
          var currentShapes = L.geoJSON(currentGeoJSON, {
            style: shapeStyle,
            pointToLayer: function (feature, latlng) {
              if (feature.properties !== undefined) {
                if (feature.properties.radius !== undefined) {
                  return L.circle(latlng, {radius: feature.properties.radius});
                }
              }
            },
            onEachFeature: function (feature, layer) {
              layer.addTo(map).enableEdit();
              processShapeLayer(layer, $shapeGeoJSON, allShapesJSON, allShapes);
            }
          });
          map.fitBounds(currentShapes.getBounds());
        } catch (e) {
          new XWiki.widgets.Notification('Error processing GeoJSON.', 'error');
        }
      } else {
        $shapeGeoJSON.val('{"type":"FeatureCollection","features":[]}');
      }

      map.on('editable:drawing:commit editable:vertex:dragend', function (e) {
        var drawnLayer = e.layer;
        processShapeLayer(drawnLayer, $shapeGeoJSON, allShapesJSON, allShapes);
      });
    });

    $$('.map-shape-view').each(function (element) {
      var mapId = $(element).attr('id').replace('map-', '');
      var options = {
        'id': mapId,
        'addFullscreen': 1,
        'includeCurrentLocation': 1
      };
      var viewMap = leafletCommons.createEmptyMap(options);
      try {
        var $shapeGeoJSON = $('#shapeGeoJSON');
        var currentGeoJSON = JSON.parse($shapeGeoJSON.val());
        var currentShapes = L.geoJSON(currentGeoJSON, {
          style: shapeStyle,
          pointToLayer: function (feature, latlng) {
            if (feature.properties !== undefined) {
              if (feature.properties.radius !== undefined) {
                return L.circle(latlng, {radius: feature.properties.radius});
              }
            }
          }
        }).addTo(viewMap);
        viewMap.fitBounds(currentShapes.getBounds());
      } catch (e) {
        new XWiki.widgets.Notification('Error processing GeoJSON.', 'error');
      }
      leafletCommons.setupLocationSearchMP('.map-search', viewMap);
    });

  }

  //Run the init() function when dom is loaded or updated
  (XWiki &amp;&amp; XWiki.domIsLoaded &amp;&amp; init()) || document.observe("xwiki:dom:loaded", init);

});</code>
    </property>
    <property>
      <name>shape-editor</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
</xwikidoc>
