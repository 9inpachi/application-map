<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc version="1.3" reference="Map.Code.Leaflet" locale="">
  <web>Map.Code</web>
  <name>Leaflet</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1558169692000</creationDate>
  <parent>xwiki:Map.MapEditor.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1558524150000</date>
  <contentUpdateDate>1558169692000</contentUpdateDate>
  <version>1.1</version>
  <title>Leaflet</title>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <content/>
  <object>
    <name>Map.Code.Leaflet</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>183f1668-1ba5-4beb-aba5-6588a615dccf</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>requirejs.config({
  paths: {
    'leaflet': ['$services.webjars.url("leaflet", "leaflet.js")'],
    'leafletSearch': ['https://cdn.jsdelivr.net/npm/leaflet-search@2.9.8/dist/leaflet-search.src.min']
  },
  shim: {
    'leaflet-search.src.min': ['leaflet']
  }
});
require(['jquery', 'leaflet', 'leafletSearch', 'leaflet-commons'], function($, leaflet, ls, leafletCommons){
  'use strict';

  function setCommonMapOptions(element){
    //Get options from the element (can be extended easily)
    var options = {};
    options.mapId = element.id;
    var zoom = element.dataset.zoom;
    options.zoom = zoom !== undefined ? zoom : 14;
    options.tiles = element.dataset.tiles !== undefined ? element.dataset.tiles : 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png';
    return options;
  }

  function createEmptyMap(options, data){
    //Create the map
    var mapId = options.mapId,
        zoom = options.zoom,
        tiles = options.tiles,
        map = L.map(mapId).setView(data.location, zoom);
    //Add a tiles layer to the map (the background)
    L.tileLayer(tiles, {
      attribution: '&amp;copy; &lt;a href="https://www.openstreetmap.org/"&gt;OpenStreetMap&lt;/a&gt; | &lt;a href="https://www.xwiki.org"&gt;XWiki&lt;/a&gt;',
      maxZoom: 18,
      id: 'mapbox.streets'
    }).addTo(map);
    //Adding the navigation control
    leafletCommons.addNavigation(map);
    //Adding the search control
    leafletCommons.addSearch(map);
    return map;
  }

  function createSimpleMap(options, data){
    var map = createEmptyMap(options, data);
    //Set options for the icon of marker
    var markerIcon;
    if(data.icon){
      markerIcon = data.icon;
    }else{
      markerIcon = "$services.webjars.url('leaflet', 'images/marker-icon.png')";
    }
    var icon = L.icon({
      iconUrl: markerIcon,
      iconRetinaUrl: "$services.webjars.url('leaflet', 'images/marker-icon-2x.png')",
      shadowUrl: "$services.webjars.url('leaflet', 'images/marker-shadow.png')",
      iconSize: ['auto',41],
      iconAnchor: [12,41],
      popupAnchor: [1,-34],
      tooltipAnchor: [16,-28],
      shadowSize: [41,41]
    });
    //Create a marker at the specified location and add it to map
    var marker = L.marker(data.location, {icon: icon}).addTo(map);
    //If popup information is set, bind it to the marker
    if(data.popup){
      marker.bindPopup(data.popup);
    }
  }

  function createPathMap(options, data){
    var map = createEmptyMap(options, data);
    //Get the name of the place to set as popupn for source and destination
    var source = L.latLng(data.source);
    leafletCommons.reverseGeocode(source, function(sourceName){
      var sourceMarker = L.marker(source).bindPopup(sourceName);
      sourceMarker.addTo(map);
    });
    var destination = L.latLng(data.destination);
    leafletCommons.reverseGeocode(destination, function(destinationName){
      var destinationMarker = L.marker(destination).bindPopup(destinationName);
      destinationMarker.addTo(map);
    });
    //Get the path as polyline from osm open source routing machine (osrm)
    var sourceDestForOSRM = data.source.reverse().join() + ';' + data.destination.reverse().join();
    var queryURL = 'http://router.project-osrm.org/route/v1/car/'+sourceDestForOSRM;
    $.getJSON(queryURL, {'alternatives':'true', 'steps':'true', 'geometries':'polyline6', 'overview':'simplified'}).then(function(osrmObject) {
      var routeColors = ['#7026c1', '#2662c1', '#c12626', '#c18f26', '#26c147', 'green'];
      var routes = osrmObject.routes;
      //Going reverse so that the recommended route (at Array(0)) is highest in layers
      for(var i=routes.length-1; i&gt;=0; i--){
        var latlngs = [];
        var steps = osrmObject.routes[i].legs[0].steps;
        var polylineFeatureGroup = L.featureGroup();
        var polyline;
        for(var j=0; j&lt;steps.length; j++){
          //Polyline is decoded from the osrm response using mapbox/polyline decode method
          polyline = L.polyline(leafletCommons.decodePolyline(steps[j].geometry, 6), {color: routeColors[i], weight: 7, stroke: 'white', lineCap: 'round'});
          polylineFeatureGroup.addLayer(polyline);
        }
        polylineFeatureGroup.addTo(map);
        polylineFeatureGroup.bindPopup("Route " + (i+1));
      }
      map.fitBounds(polylineFeatureGroup.getBounds());
    });
  }

  function init(){
    //Create SimpleMap
    $$('.map-container-simplemap').each(function(element){
      var options = setCommonMapOptions(element);
      //Get the data to be displayed on the map
      var data = {};
      data.icon = element.dataset.markericon;
      data.location = element.dataset.location;
      leafletCommons.getLocationCoords(data.location, function(location){
        data.location = location;
        data.popup = element.dataset.popup;
        //Create the map with the data collected
        createSimpleMap(options, data);
      });
    });
    //Create PathMap
    $$('.map-container-pathmap').each(function(element){
      var options = setCommonMapOptions(element);
      //Get the data to be displayed on the map
      var data = {};
      leafletCommons.getLocationCoords(element.dataset.source, function(source){
        leafletCommons.getLocationCoords(element.dataset.destination, function(destination){
          data.location = source;
          data.source = source;
          data.destination = destination;
          //Create the map with the data collected
          createPathMap(options, data);
        });
      });
    });
  };

  //Run the init() function when dom is loaded
  (XWiki &amp;&amp; XWiki.domIsLoaded &amp;&amp; init()) || document.observe('xwiki:dom:loaded', init);

});</code>
    </property>
    <property>
      <name>leaflet-map</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>Map.Code.Leaflet</name>
    <number>1</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>a77b225d-df4c-4db8-810d-84371ea7fcbf</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>//COMMON FUNCTIONS
define('leaflet-commons', ['jquery'], function($){
  return {

    //Remove the old marker and add a new one
    addMarker: function(oldMarker, map, e){
      if(oldMarker){
        oldMarker.remove();
      }
      return L.marker(e.latlng).addTo(map);
    },

    //Works only if the connection is secure (https etc.)
    locateUser: function(map){
      var locMarker = L.circleMarker();
      map.locate({setView: true, maxZoom: 16, watch: false});
      map.on('locationfound', function(e){
        locMarker.remove();
        locMarker = L.circleMarker(e.latlng, {
          color: '#146ea7',
          fillColor: '#146ea7',
          fillOpacity: 0.4,
          radius: 10
        }).bindPopup('Current location').addTo(map);
      })
    },

    //Function for adding navigation control
    addNavigation: function(map){
      var rootScope = this;
      L.Control.navigation = L.Control.extend({
        onAdd: function(map){
          var container = L.DomUtil.create('div', 'leaflet-control-loc');
          var locateIcon = L.DomUtil.create('div', 'fa fa-map-marker');
          locateIcon.setAttribute('title', 'Current location');
          locateIcon.setAttribute('aria-label', 'Current location');
          container.appendChild(locateIcon);
          L.DomEvent.on(container, 'click', L.DomEvent.stopPropagation)
            .on(container, 'click', L.DomEvent.stop)
            .on(container, 'click', this._locateUser, this);
          return container;
        },
        _locateUser: function(e){
          e.preventDefault();
          rootScope.locateUser(this._map);
        }
      });
      (new L.Control.navigation({position: 'topright'})).addTo(map);
    },

    //Function for adding search control
    addSearch: function(map){
      map.addControl(new L.Control.Search({
        url: 'http://nominatim.openstreetmap.org/search?format=json&amp;q={s}',
        jsonpParam: 'json_callback',
        propertyName: 'display_name',
        propertyLoc: ['lat', 'lon'],
        marker: L.circleMarker([0, 0], {radius: 30}).bindPopup('Searched location'),
        autoCollapse: true,
        autoType: false,
        minLength: 2,
        position: 'topright'
      }));
    },

    //Return latlng if location is address or a string of latlng
    getLocationCoords: function(location, callback){
      //Check if the location type is an address or coordinates
      var locType = 'address';
      if(location){
        var checkLoc = location.split(',');
        //Location type is coordinates if there are two values and each is a number
        if(checkLoc.length == 2 &amp;&amp; !isNaN(checkLoc[0].trim()) &amp;&amp; !isNaN(checkLoc[1].trim())){
          locType = 'latLng';
        }
      }
      if(locType == 'latLng'){
        //Make an array for of the two coordinates
        var latLng = location.split(',').map((val) =&gt; {
          return val.trim()
        });
        //Set the location to the array
        location = latLng;
        callback(location);
      } else {
        //If the location type is address, get the location coordinates from openstreetmap api
        var queryURL = 'https://nominatim.openstreetmap.org/search';
        var q = location;
        //Make the request
gin: 0;&amp;#xd;
}&amp;#xd;
.leaflet-contrq, 'format':'json'}).then(function(locFromAddress) {
          if (locFromAddress != undefined &amp;&amp; locFromAddress.length &gt; 0) {
            var latLng = [locFromAddress[0].lat, locFromAddress[0].lon];
            //Set the location to the coordinates gotten from openstreetmap api
            location = latLng;
            callback(location);
          } else {
            //Display an error if the address does not map to a location
            new XWiki.widgets.Notification('Error while geocoding the address "' + q +'" with OpenStreetMap Nominatim', 'error');
          }
        });
      }
    },

    reverseGeocode: function(location, callback){
      var queryURL = 'https://nominatim.openstreetmap.org/reverse';
      //Make the request
      $.getJSON(queryURL, {'lat':location.lat, 'lon': location.lng, 'format':'json'}).then(function(locationInfo) {
        if (locationInfo != undefined) {
          //Set the place name gotten from openstreetmap api
          var placeName = locationInfo.display_name;
          callback(placeName);
        } else {
          callback('Place');
          //Display an error if the address does not map to a location
          new XWiki.widgets.Notification('Error while reverse geocoding the location "' + location +'" with OpenStreetMap Nominatim', 'error');
        }
      });
    },

    //Decodes the polylines (taken from @mapbox/polyline)
    decodePolyline: function(str, precision) {
      var index = 0, lat = 0, lng = 0, coordinates = [], shift = 0, result = 0, byte = null, latitude_change, longitude_change, factor = Math.pow(10, Number.isInteger(precision) ? precision : 5);
      while (index &lt; str.length) {
          // Reset shift, result, and byte
          byte = null;
          shift = 0;
          result = 0;
          do {
              byte = str.charCodeAt(index++) - 63;
              result |= (byte &amp; 0x1f) &lt;&lt; shift;
              shift += 5;
          } while (byte &gt;= 0x20);
          latitude_change = ((result &amp; 1) ? ~(result &gt;&gt; 1) : (result &gt;&gt; 1));
          shift = result = 0;
          do {
              byte = str.charCodeAt(index++) - 63;
              result |= (byte &amp; 0x1f) &lt;&lt; shift;
              shift += 5;
          } while (byte &gt;= 0x20);
          longitude_change = ((result &amp; 1) ? ~(result &gt;&gt; 1) : (result &gt;&gt; 1));
          lat += latitude_change;
          lng += longitude_change;
          coordinates.push([lat / factor, lng / factor]);
      }
      return coordinates;
    }

  }
})</code>
    </property>
    <property>
      <name>leaflet-common-functions</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>Map.Code.Leaflet</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>efc35b1a-4b82-4816-9d4a-b9b9481591a3</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <defaultValue>long</defaultValue>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <contenttype>PureText</contenttype>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>@import "$services.webjars.url('leaflet', 'leaflet.css')";
@import "https://cdn.jsdelivr.net/npm/leaflet-search@2.9.8/src/leaflet-search.css";
.map-container, .simplemap-preview{
  border: 4px solid white;
  border-radius: 5px;
  box-shadow: 0px 0px 3px silver;
}
.leaflet-container .leaflet-control-search, .leaflet-container .leaflet-control-search:hover, .leaflet-container .leaflet-control-search:active{
  background: none;
  border: none;
}
.leaflet-container .leaflet-control-loc, .leaflet-container .leaflet-control-search .search-button{
  background: white;
  width: 40px;
  height: 40px;
  text-align: center;
  cursor: pointer;
  border-radius: 50%;
  overflow: hidden;
  border: 1px solid silver;
  transition: background-color 0.3s;
}
.leaflet-container .leaflet-control-search .search-button{
  font-family: FontAwesome;
  position: relative;
}
.leaflet-control-loc&gt;.fa, .leaflet-container .leaflet-control-search .search-button:before{
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  color: black;
  font-size: 20px;
}
.leaflet-container .leaflet-control-search .search-button:before{
  content: '\f002';
  font-size: 17px;
  margin-top: -2px;
}
.leaflet-container .leaflet-control-loc:hover, .leaflet-container .leaflet-control-search .search-button:hover{
  background: #f4f4f4;
  transition: background 0.3s;
  text-decoration: none;
}
.leaflet-container .leaflet-control-search input.search-input{
  border: 1px solid silver;
  border-radius: 15px;
  color: dimgray;
  height: 40px;
  padding: 5px 10px;
  margin: 0;
}
.leaflet-control-search .search-cancel{
  margin: 10px 0;
  right: 42px;
}
.leaflet-control-search.search-load input.search-input{
  background: white;
}
.leaflet-control-search .search-tooltip{
  border: none;
  border-radius: 10px;
  background: white;
  color: black;
  padding: 5px;
  left: 0;
  right: 0;
  float: right;
  overflow: auto;
}
.leaflet-control-search .search-tooltip .search-tip{
  border: none;
  border-radius: 0;
  background: white;
  color: black;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>leaflet-css</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
</xwikidoc>
